From 675ea57910daf65376b35f6d83353d907e8b39cb Mon Sep 17 00:00:00 2001
From: Jonathon Hall <jhall@londontrustmedia.com>
Date: Fri, 20 Dec 2019 09:34:28 -0500
Subject: [PATCH 2/2] Add outgoing-dns-ifs command-line argument

---
 src/daemon.c | 19 +++++++++++++++++--
 src/rs.c     | 45 ++++++++++++++++++++++++++++++++++++++++++---
 src/rs.h     |  7 ++++++-
 3 files changed, 65 insertions(+), 6 deletions(-)

diff --git a/src/daemon.c b/src/daemon.c
index ccfcab5..edf58fc 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -35,6 +35,7 @@ typedef struct hsk_options_s {
   uint8_t identity_key_[32];
   uint8_t *identity_key;
   char *seeds;
+  char *outgoing_dns_ifs;
   int pool_size;
 } hsk_options_t;
 
@@ -51,6 +52,7 @@ hsk_options_init(hsk_options_t *opt) {
   memset(opt->identity_key_, 0, sizeof(opt->identity_key_));
   opt->identity_key = NULL;
   opt->seeds = NULL;
+  opt->outgoing_dns_ifs = NULL;
   opt->pool_size = HSK_POOL_SIZE;
 }
 
@@ -156,7 +158,7 @@ help(int r) {
 
 static void
 parse_arg(int argc, char **argv, hsk_options_t *opt) {
-  const static char *optstring = "c:n:r:i:u:p:k:s:l:h"
+  const static char *optstring = "c:n:r:i:u:p:k:s:l:o:h"
 #ifndef _WIN32
     "d"
 #endif
@@ -172,6 +174,7 @@ parse_arg(int argc, char **argv, hsk_options_t *opt) {
     { "identity-key", required_argument, NULL, 'k' },
     { "seeds", required_argument, NULL, 's' },
     { "log-file", required_argument, NULL, 'l' },
+    { "outgoing-dns-ifs", required_argument, NULL, 'o' },
 #ifndef _WIN32
     { "daemon", no_argument, NULL, 'd' },
 #endif
@@ -308,6 +311,18 @@ parse_arg(int argc, char **argv, hsk_options_t *opt) {
         break;
       }
 
+      case 'o': {
+        if (!optarg || strlen(optarg) == 0)
+          return help(1);
+
+        if (opt->outgoing_dns_ifs)
+          free(opt->outgoing_dns_ifs);
+
+        opt->outgoing_dns_ifs = strdup(optarg);
+
+        break;
+      }
+
 #ifndef _WIN32
       case 'd': {
         background = true;
@@ -500,7 +515,7 @@ hsk_daemon_open(hsk_daemon_t *daemon, hsk_options_t *opt) {
     return rc;
   }
 
-  rc = hsk_rs_open(daemon->rs, opt->rs_host);
+  rc = hsk_rs_open(daemon->rs, opt->rs_host, opt->outgoing_dns_ifs);
 
   if (rc != HSK_SUCCESS) {
     fprintf(stderr, "failed opening rns: %s\n", hsk_strerror(rc));
diff --git a/src/rs.c b/src/rs.c
index 3794190..2c7d390 100644
--- a/src/rs.c
+++ b/src/rs.c
@@ -195,7 +195,7 @@ hsk_rs_set_key(hsk_rs_t *ns, const uint8_t *key) {
 }
 
 static bool
-hsk_rs_inject_options(hsk_rs_t *ns) {
+hsk_rs_inject_options(hsk_rs_t *ns, char **outgoing_ifs, int num_outgoing_if) {
   if (ns->config) {
     if (ub_ctx_config(ns->ub, ns->config) != 0)
       return false;
@@ -223,6 +223,14 @@ hsk_rs_inject_options(hsk_rs_t *ns) {
   if (ub_ctx_set_option(ns->ub, "do-tcp:", "no") != 0)
     return false;
 
+  for(int i=0; i<num_outgoing_if; ++i) {
+    if (ub_ctx_set_option(ns->ub, "outgoing-interface:", outgoing_ifs[i]) != 0) {
+      hsk_rs_log(ns, "failed setting outgoing interface: %s\n", outgoing_ifs[i]);
+      return false;
+    }
+    hsk_rs_log(ns, "applied outgoing interface: %s\n", outgoing_ifs[i]);
+  }
+
   char stub[HSK_MAX_HOST];
 
   if (!hsk_sa_to_at(ns->stub, stub, HSK_MAX_HOST, HSK_NS_PORT))
@@ -249,11 +257,42 @@ hsk_rs_inject_options(hsk_rs_t *ns) {
 }
 
 int
-hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr) {
+hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr, char *outgoing_dns_ifs) {
   if (!ns || !addr)
     return HSK_EBADARGS;
 
-  if (!hsk_rs_inject_options(ns))
+  // Parse outgoing DNS interfaces
+  int num_outgoing_if = 0;
+  char **outgoing_ifs = NULL;
+  // No string or an empty string indicates 0 interfaces specified (libunbound
+  // will use 'any' by default)
+  if(outgoing_dns_ifs && *outgoing_dns_ifs)
+  {
+    // Count addresses (number of commas + 1)
+    num_outgoing_if = 1;
+    for(char *dns_char = outgoing_dns_ifs; *dns_char; ++dns_char) {
+      if(*dns_char == ',')
+          ++num_outgoing_if;
+    }
+    // Allocate string array, use data from original input string (replace commas
+    // with nulls)
+    outgoing_ifs = malloc(sizeof(char*) * num_outgoing_if);
+    outgoing_ifs[0] = outgoing_dns_ifs;
+    num_outgoing_if = 1;
+    for(char *dns_char = outgoing_dns_ifs; *dns_char; ++dns_char) {
+      if(*dns_char == ',') {
+        // This value starts on the next character
+        outgoing_ifs[num_outgoing_if] = dns_char+1;
+        // Terminate prior value
+        *dns_char = '\0';
+        hsk_rs_log(ns, "outgoing DNS interface: %s\n", outgoing_ifs[num_outgoing_if-1]);
+        ++num_outgoing_if;
+      }
+    }
+    hsk_rs_log(ns, "outgoing DNS interface: %s\n", outgoing_ifs[num_outgoing_if-1]);
+  }
+
+  if (!hsk_rs_inject_options(ns, outgoing_ifs, num_outgoing_if))
     return HSK_EFAILURE;
 
   ns->socket = malloc(sizeof(uv_udp_t));
diff --git a/src/rs.h b/src/rs.h
index cb8e1bc..e31b6ed 100644
--- a/src/rs.h
+++ b/src/rs.h
@@ -49,8 +49,13 @@ hsk_rs_set_config(hsk_rs_t *ns, const char *config);
 bool
 hsk_rs_set_key(hsk_rs_t *ns, const uint8_t *key);
 
+// When opening the recursive server, the interfaces to use for outgoing DNS
+// requests can be specified as a comma-delimited string.  Commas in the string
+// will be replaced with nulls when the string is split (the original string is
+// modified).  This is passed to libunbound - if no interfaces are given, 'any'
+// is used by default.
 int
-hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr);
+hsk_rs_open(hsk_rs_t *ns, const struct sockaddr *addr, char *outgoing_dns_ifs);
 
 // Close the recursive name server.  This may complete asynchronously;
 // stop_callback is called when the name server can be destroyed.
-- 
2.7.4

